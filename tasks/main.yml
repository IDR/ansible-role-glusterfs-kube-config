---
- name: Set path envionrment variable if necessary
  set_fact:
    _gluster_k8s_environment: "{{ (gluster_k8s_add_bin_path | length > 0) | ternary({'PATH': gluster_k8s_add_bin_path + ':' + ansible_env.PATH}, {}) }}"

- name: Install git
  become: true
  become_user: root
  yum:
    name: git
    state: present

- name: Load required dm modules
  become: yes
  modprobe:
    name: "{{ item }}"
    state: present
  with_items: "{{ gluster_k8s_kernel_modules }}"

- name: load required dm modules on startup
  become: yes
  template:
    src: glusterfs-dm.conf.j2
    dest: /etc/modules-load.d/glusterfs-dm.conf

- name: Check if namespace exists
  command: >
    kubectl get ns {{ gluster_k8s_namespace }}
  register: _gluster_k8s_namespace_check
  failed_when: _gluster_k8s_namespace_check.rc not in [0, 1]
  changed_when: False
  environment: "{{ _gluster_k8s_environment }}"

- name: Create gluster namespace if necessary
  command: >
    kubectl create namespace {{ gluster_k8s_namespace }}
  when: _gluster_k8s_namespace_check.rc == 1
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true

- name: Clone gluster-kubernetes
  git:
    repo: "{{ gluster_kubernetes_repo }}"
    dest: ~/gluster-kubernetes
    version: "{{ gluster_kubernetes_version }}"
    force: yes

- name: Template GlusterFS gk-deploy topology json
  template:
    src: glusterfs-topology.json.j2
    dest: ~/gluster-kubernetes/deploy/topology.json

- name: Download heketi cli tarball
  get_url:
    url: https://github.com/heketi/heketi/releases/download/v5.0.1/heketi-client-v5.0.1.linux.amd64.tar.gz
    checksum: "sha256:748ed1b3bac916747a53ba95639b582cf31952d320b01bbbab732f12271c3638"
    dest: ~/

- name: Create directory for extraction of tarball
  file:
    path: ~/heketi
    state: directory

- name: Extract heketi cli tarball
  unarchive:
    src: ~/heketi-client-v5.0.1.linux.amd64.tar.gz
    dest: ~/heketi
    remote_src: yes

- name: Copy heketi-cli bin into place
  become: true
  become_user: root
  command: >
    cp ~/heketi/heketi-client/bin/heketi-cli /usr/local/bin/heketi-cli
  args:
    creates: /usr/local/bin/heketi-cli

- name: Deploy GlusterFS on Kubernetes with gk-deploy (note -- this is coffee break worthy, it takes a while)
  command: >
    ./gk-deploy
    --namespace {{ gluster_k8s_namespace }}
    --deploy-gluster
    --wait {{ gluster_k8s_wait_seconds }}
    --admin-key {{ gluster_k8s_admin_key }}
    --user-key {{ gluster_k8s_user_key }}
    --yes
  args:
    chdir: ~/gluster-kubernetes/deploy
    creates: ~/gk-deployed.flag
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true

# WARNING: race condition here: gk-deploy might complete but this flag file
# might not be created if the playbook is interrupted for some reason
- name: Mark that gk-deploy is complete
  shell: date > ~/gk-deployed.flag
  args:
    creates: ~/gk-deployed.flag

- name: Query the API for the heketi IP address
  command: >
    kubectl get service heketi
    --namespace={{ gluster_k8s_namespace }}
    -o jsonpath='{.spec.clusterIP}:{.spec.ports[?(@.name=="heketi")].port}'
  register: _gluster_k8s_heketi_address_raw
  changed_when: False
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true

- name: Set the heketi IP
  set_fact:
    _gluster_k8s_heketi_address: "{{ _gluster_k8s_heketi_address_raw.stdout }}"
  run_once: true

- name: Fail when there's no IP address (this could use grooming)
  fail:
    msg: "That sure doesn't look like an IP address in the heketi service response from the kube api"
  when: '_gluster_k8s_heketi_address | length < 3'
  run_once: true

- debug:
    msg: "The heketi ip address is: {{ _gluster_k8s_heketi_address }}"
  run_once: true

- name: Check heketi db storage was setup
  command: >
    heketi-cli -s {{ gluster_k8s_storageclass_resturl }}
    --user admin --secret {{ gluster_k8s_admin_key | quote }}
    volume list
  register: _gluster_k8s_heketi_cli_volumes
  changed_when: False
  failed_when: "'Name:heketidbstorage' not in _gluster_k8s_heketi_cli_volumes.stdout"
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true

- name: Template the storage class yaml
  template:
    src: glusterfs-storageclass.yaml.j2
    dest: ~/glusterfs-storageclass.yaml
  register: _gluster_k8s_storageclass

- name: Delete the storage class if the definition changed
  command: >
    kubectl delete storageclass {{ gluster_k8s_storageclass_name }}
  when: '_gluster_k8s_storageclass | changed'
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true

- name: Check if storage class exists
  command: >
    kubectl get storageclass {{ gluster_k8s_storageclass_name }}
  register: _gluster_k8s_storageclass_check
  failed_when: _gluster_k8s_storageclass_check.rc not in [0, 1]
  changed_when: False
  environment: "{{ _gluster_k8s_environment }}"

- name: Create the storage class
  command: >
    kubectl create -f ~/glusterfs-storageclass.yaml
  when: _gluster_k8s_storageclass_check.rc == 1
  environment: "{{ _gluster_k8s_environment }}"
  run_once: true
